@page "/vot"
@using LiveVoting.WasmClient.StateManagement
@using LiveVoting.Shared.Dtos
@inject AuthStateProvider AuthStateProvider
@inject NavigationManager Navigation
@inject HttpClient Http

@code {
    private bool isCheckingAuthState = true;
    private bool isAuthenticated = false;
    private bool showError = false;
    private string errorMessage = string.Empty;
    private bool hasVoted = false;
    private CandidateDto votedCandidate;

    protected override async Task OnInitializedAsync()
    {
        await AuthStateProvider.CheckAuthStateAsync();
        isAuthenticated = AuthStateProvider.IsAuthenticated;
        isCheckingAuthState = false;

        if (!isAuthenticated)
        {
            errorMessage = "Nu sunteți autentificat. Veți fi redirecționat către pagina de autentificare.";
            showError = true;
            await Task.Delay(3000);
            Navigation.NavigateTo("/login");
            return;
        }

        var emailVerified = await IsEmailVerified();

        if (!emailVerified)
        {
            errorMessage = "Emailul dumneavoastră nu este verificat. Veți fi redirecționat către pagina de autentificare.";
            showError = true;
            await Task.Delay(3000);
            Navigation.NavigateTo("/resend-email-verification");
            return;
        }

        // Check if the user has voted
        var result = await CheckIfUserHasVoted();
        hasVoted = result.hasVoted;
        votedCandidate = result.candidate;
    }

    private async Task<bool> IsEmailVerified()
    {
        try
        {
            var response = await Http.GetAsync("api/protected");
            return response.IsSuccessStatusCode;
        }
        catch (Exception)
        {
            return false;
        }
    }

    private async Task<(bool hasVoted, CandidateDto candidate)> CheckIfUserHasVoted()
    {
        try
        {
            var response = await Http.GetAsync("api/alegeri-2024/voteaza");

            if (response.IsSuccessStatusCode)
            {
                var candidateDto = await response.Content.ReadFromJsonAsync<CandidateDto>();
                return (true, candidateDto);
            }
            else
            {
                return (false, null);
            }
        }
        catch (Exception)
        {
            return (false, null);
        }
    }

    private async Task DeleteVote()
    {
        try
        {
            var response = await Http.DeleteAsync($"api/alegeri-2024/voteaza/{votedCandidate.ImageUrl}"); 
            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/reloading-vot"); // Refresh the page
            }
        }
        catch (Exception ex)
        {
            // Handle error (e.g., show a message to the user)
        }
    }
}

@if (isCheckingAuthState)
{
    <div class="mt-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="text-secondary mt-3">Verificăm autentificarea...</p>
    </div>
}
else if (isAuthenticated && !showError)
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-md-8">
                @if (hasVoted)
                {
                    <div>
                        <h1 class="text-success">Ați votat!</h1>
                        <p class="text-muted">Ați votat pentru candidatul:</p>
                        <CandidateComponent CandidateDto="votedCandidate"></CandidateComponent>

                        <!-- Buttons for managing votes -->
                        <div class="mt-4">
                            <button class="btn btn-danger me-2" @onclick="DeleteVote">Șterge votul</button>
                        </div>
                    </div>
                }
                else
                {
                    <div>
                        <h1 class="text-success">Bine ați venit la vot!</h1>
                        <p class="text-muted">Aici va puteti exprima intentia de vot, sigur si rapid!</p>
                        <VoteComponent></VoteComponent>
                    </div>
                }
            </div>
        </div>
    </div>
}
else if (showError)
{
    <div class="alert alert-danger mt-5" role="alert">
        <h4 class="alert-heading">Acces Refuzat!</h4>
        <p>@errorMessage</p>
        <hr>
        <p class="mb-0">Dacă nu sunteți redirecționat automat, <a href="/login" class="alert-link">faceți click aici</a>.</p>
    </div>
}
